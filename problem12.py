# ----------------------------------------------------------------------------------------------------------------------

# Problem 12 - Highly divisible triangular number
# The sequence of triangle numbers is generated by adding the natural numbers...
# ...So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

# ----------------------------------------------------------------------------------------------------------------------
import math
from pip._vendor.msgpack.fallback import xrange


def get_divisors(n):
    multiplied_divisors = []
    for i in xrange(1, int(math.sqrt(n) + 1)):
        if n % i == 0:
            yield i
            if i * i != n:
                multiplied_divisors.append(n / i)
    for divisor in reversed(multiplied_divisors):
        yield divisor


number = 0
helper_number = 1
while True:
    number = number + helper_number
    if len(list(get_divisors(number))) > 500:
        print("Number: ", number)
        print("Divisors: ", list(get_divisors(number)))
        break

    helper_number += 1
